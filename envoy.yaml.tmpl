admin:
  access_log_path: /dev/stdout
  address:
    socket_address:
      protocol: TCP
      # NOTE: Must be accessible to the servo for aggregation
      address: 0.0.0.0
      port_value: ${OPSANI_ENVOY_METRICS_PORT}
static_resources:
  listeners:
  - address:
      socket_address:
        address: 0.0.0.0
        port_value: ${OPSANI_ENVOY_PROXY_SERVICE_PORT}
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          codec_type: auto
          # TODO: We may want to figure out how to switch this based on env. It is advisory in the stats
          stat_prefix: ingress_http
          # stat_prefix: ingress_https
          route_config:
            name: local_route
            virtual_hosts:
            - name: service
              domains:
              - "*"
              routes:
              - match:
                  prefix: "/"
                route:
                  cluster: service
          access_log:
          - name: envoy.access_loggers.file
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
              path: "/dev/stdout"
          http_filters:
          - name: envoy.health_check
            config:
              pass_through_mode: false
              headers:
              - name: ":path"
                exact_match: "/healthz"
              - name: "x-envoy-livenessprobe"
                exact_match: "healthz"
          - name: envoy.grpc_web
          - name: envoy.filters.http.router
      # TODO: Do we need this???
      # tls_context:
      #   common_tls_context:
      #     tls_certificates:
      #     - certificate_chain:
      #         filename: "/etc/ssl/envoy/tls.crt"
      #       private_key:
      #         filename: "/etc/ssl/envoy/tls.key"
  clusters:
  - name: service
    connect_timeout: 0.5s
    # NOTE: It may be necessary to disable this if we are only supporting HTTPS 1.1 and not HTTP/2
    http2_protocol_options: {}
    load_assignment:
      cluster_name: some_service
      endpoints:
        - lb_endpoints:
          - endpoint:
              address:
                socket_address:
                  address: 127.0.0.1
                  port_value: ${OPSANI_ENVOY_PROXIED_CONTAINER_PORT}
    health_checks:
      timeout: 1s
      interval: 10s
      unhealthy_threshold: 2
      healthy_threshold: 2
      grpc_health_check: {}
    # TODO: This may or may not be necessary depending
    # transport_socket:
    #   name: envoy.transport_sockets.tls
    #   typed_config:
    #     "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
    #     sni: remote.example.com # TODO: Becomes an env variable to match on SNI hostname
    #     common_tls_context:
    #       validation_context:
    #         match_subject_alt_names:
    #         - exact: "*.remote.example.com" # TODO: This needs to exactly match the hostname in the upstream SSL certificate
    #         trusted_ca:
    #           filename: /etc/ssl/certs/ca-certificates.crt

# TODO: I think we can dump
# layered_runtime:
#   layers:
#     - name: static_layer_0
#       static_layer:
#         envoy:
#           resource_limits:
#             listener:
#               example_listener_name:
#                 connection_limit: 10000
#         overload:
#           global_downstream_max_connections: 50000
