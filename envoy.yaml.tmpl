admin:
  access_log_path: /dev/stdout
  address:
    socket_address:
      protocol: TCP
      # NOTE: Must be accessible to the servo for aggregation
      address: 0.0.0.0
      port_value: ${OPSANI_ENVOY_METRICS_PORT}
static_resources:
  listeners:
  - address:
      socket_address:
        address: 0.0.0.0
        port_value: ${OPSANI_ENVOY_PROXY_SERVICE_PORT}
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          codec_type: AUTO
          stat_prefix: opsani_proxy_service # Advisory stats prefix
          route_config:
            name: local_route
            virtual_hosts:
            - name: opsani_proxy_service
              domains:
              - "*"
              routes:
              - match:
                  prefix: "/"
                route:
                  cluster: opsani_proxied_container
          access_log:
          - name: envoy.access_loggers.file
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
              path: "/dev/stdout"
          http_filters:
          - name: envoy.filters.http.health_check
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.health_check.v3.HealthCheck
              pass_through_mode: true
          - name: envoy.grpc_web
          - name: envoy.filters.http.router
  clusters:
  - name: opsani_proxied_container
    connect_timeout: 0.5s
    # NOTE: It may be necessary to disable this if we are only supporting HTTPS 1.1 and not HTTP/2
    http2_protocol_options: {}
    load_assignment:
      cluster_name: opsani_proxied_container
      endpoints:
        - lb_endpoints:
          - endpoint:
              address:
                socket_address:
                  address: 127.0.0.1
                  port_value: ${OPSANI_ENVOY_PROXIED_CONTAINER_PORT}
    # TODO: We may only need to do this if we want to enable TLS enforcement
    # transport_socket:
    #   name: envoy.transport_sockets.tls
    #   typed_config:
    #     "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
    #     sni: remote.example.com # TODO: Becomes an env variable to match on SNI hostname
    #     common_tls_context:
    #       validation_context:
    #         match_subject_alt_names:
    #         - exact: "*.remote.example.com" # TODO: This needs to exactly match the hostname in the upstream SSL certificate
    #         trusted_ca:
    #           filename: /etc/ssl/certs/ca-certificates.crt
