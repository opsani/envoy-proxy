# Opsani Envoy Sidecar Configuration
admin:
  access_log_path: /dev/stdout
  address:
    socket_address:
      protocol: TCP
      # NOTE: Must be accessible to the servo for aggregation
      address: 0.0.0.0
      port_value: ${OPSANI_ENVOY_METRICS_PORT} # OPSANI_ENVOY_METRICS_PORT

static_resources:
  listeners:
  - address:
      socket_address:
        address: 0.0.0.0
        port_value: ${OPSANI_ENVOY_PROXY_SERVICE_PORT} # OPSANI_ENVOY_PROXY_SERVICE_PORT
    listener_filters:
    - name: envoy.filters.listener.tls_inspector
    - name: envoy.filters.listener.http_inspector

    filter_chains:
    # Match on HTTP ingress traffic
    - filter_chain_match:
        application_protocols:
        - "http/1.1"
        transport_protocol: raw_buffer # NOTE: Matches non-TLS requests
      filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          stat_prefix: ingress_http
          route_config:
            virtual_hosts:
            - name: default
              domains: "*"
              routes:
              - match: { prefix: "/" }
                route: { cluster: opsani_proxied_container }
          access_log:
          - name: envoy.access_loggers.file
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
              path: "/dev/stdout"
          http_filters:
          - name: envoy.filters.http.router

    # Match on HTTPS and HTTP/2 ingress traffic
    - filter_chain_match:
        application_protocols:
        - "http/1.1"
        - "h2" # Match HTTP/2 traffic
        transport_protocol: tls
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
          common_tls_context:
            tls_certificates:
            - certificate_chain: { filename: "/etc/certificate_chain.pem" }
              private_key: { filename: "/etc/private_key.pem" }
      filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          stat_prefix: ingress_https
          route_config:
            virtual_hosts:
            - name: default
              domains: "*"
              routes:
              - match: { prefix: "/" }
                route: { cluster: opsani_proxied_container }
          access_log:
          - name: envoy.access_loggers.file
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
              path: "/dev/stdout"
          http_filters:
          - name: envoy.filters.http.router
  clusters:
  - name: opsani_proxied_container
    type: LOGICAL_DNS
    connect_timeout: 0.5s
    transport_socket_matches:
    # Selects first match -- start most specific
    - name: "Enable upstream TLS with SNI validation"
      match:
        OPSANI_ENVOY_PROXIED_CONTAINER_TLS_ENABLED: true
        OPSANI_ENVOY_PROXIED_CONTAINER_TLS_VALIDATION: true
        OPSANI_ENVOY_PROXIED_CONTAINER_SNI_ENABLED: true
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
          sni: ${OPSANI_ENVOY_PROXIED_CONTAINER_SNI_HOSTNAME}
          common_tls_context:
            validation_context:
              match_subject_alt_names:
              # NOTE: Must exactly match the alt name in the upstream SSL certificate
              - exact: "${OPSANI_ENVOY_PROXIED_CONTAINER_TLS_ALT_NAME}"
              trusted_ca:
                filename: /etc/ssl/certs/ca-certificates.crt

    # NOTE: TLS certificates are validated and the certificate subject alt name is matched
    - name: "Enable upstream TLS with validation"
      match:
        OPSANI_ENVOY_PROXIED_CONTAINER_TLS_ENABLED: true
        OPSANI_ENVOY_PROXIED_CONTAINER_TLS_VALIDATION: true
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
          common_tls_context:
            validation_context:
              match_subject_alt_names:
              # NOTE: Must exactly match the alt name in the upstream SSL certificate
              # if you have a wildcard must be "*.example.com"
              - exact: "${OPSANI_ENVOY_PROXIED_CONTAINER_TLS_ALT_NAME}"
              trusted_ca:
                filename: /etc/ssl/certs/ca-certificates.crt

    # NOTE: Upstream certificates are not verified (can be self signed, expired, etc)
    - name: "Enable upstream TLS"
      match:
        OPSANI_ENVOY_PROXIED_CONTAINER_TLS_ENABLED: true
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
    - name: "default"
      match: {}
      transport_socket:
        name: envoy.transport_sockets.raw_buffer
    # NOTE: Uncomment if supporting HTTP/2 as well as HTTPS/1.1
    # If the upstream server does not support HTTP/2 then this will throw a 503
    ${OPSANI_ENVOY_HTTP2_PROTOCOL_OPTIONS}
    load_assignment:
      cluster_name: opsani_proxied_container
      endpoints:
        - lb_endpoints:
          - endpoint:
              address:
                socket_address:
                  address: ${OPSANI_ENVOY_PROXIED_CONTAINER_ADDR} # OPSANI_ENVOY_PROXIED_CONTAINER_NAME localhost #127.0.0.1
                  port_value: ${OPSANI_ENVOY_PROXIED_CONTAINER_PORT} # OPSANI_ENVOY_PROXIED_CONTAINER_PORT
            metadata:
              filter_metadata:
                envoy.transport_socket_match:
                  # NOTE: This metadata is utilized in the `transport_socket_matches` stanza above
                  OPSANI_ENVOY_PROXIED_CONTAINER_TLS_ENABLED: ${OPSANI_ENVOY_PROXIED_CONTAINER_TLS_ENABLED}
                  OPSANI_ENVOY_PROXIED_CONTAINER_TLS_VALIDATION: ${OPSANI_ENVOY_PROXIED_CONTAINER_TLS_VALIDATION}
                  OPSANI_ENVOY_PROXIED_CONTAINER_SNI_ENABLED: ${OPSANI_ENVOY_PROXIED_CONTAINER_SNI_ENABLED}

# Avoid warnings about `global_downstream_max_connections`
layered_runtime:
  layers:
    - name: static_layer_0
      static_layer:
        envoy:
          resource_limits:
            listener:
              example_listener_name:
                connection_limit: 10000
        overload:
          global_downstream_max_connections: 50000
